[--
   Copyright 2016 Immutables Authors and Contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
--]
[template public declareFields Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
[if not impl.virtual]
[jsonIgnore a]
private final [inst.typer impl.type] [inst.namer impl];
[/if]
[for el in enc.element if el.valueField]
[jsonIgnore a]
[if el.private]private [else]public [/if][if el.final]final [/if][inst.typer el.type] [inst.namer el];
[/for]
[/for]
[/template]

[template public defaultValue Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
  [if impl.code]
[inst.codeOf impl]
  [else]
null
[output.error]
Could not generate constructor. Attribute '[a.name]' does not have default value.
[/output.error]
  [/if]
[/for]
[/template]

[template public assignDefaultFields Attribute... as Boolean pureCopy]
[for a in as if a.encoding,
    inst = a.instantiation,
    el in inst.encoding.element if el.valueField]
[if el.code]
  [if pureCopy or (not inst.virtualNotOfSameType)]
this.[inst.namer el] = [inst.codeOf el];
  [else]
this.[inst.namer el] = [inst.codeOfAuxFieldVirtualDecorated el];
  [/if]
[/if]
[/for]
[/template]

[template public constructorAcceptType Attribute a][a.instantiation.typer a.instantiation.encoding.from.firstParam.type][/template]

[template public virtualImpl Attribute a][output.trim]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
[if inst.virtualNotOfSameType]
[inst.typer impl.type] [a.instantiation.decoratedImplFieldName]
[else]
[a.instantiation.namer a.instantiation.encoding.impl]
[/if]
[/for]
[/output.trim][/template]

[template public copyMethods Attribute a Invokable returnCopy]
[for type = a.containingType,
    inst = a.instantiation,
    el in inst.encoding.element if el.copy]

[if el.private]private [else]public [/if][if el.final]final [/if][type.typeImmutable.simple][type.generics.args] [inst.namer el]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] {
  [inst.typer el.type] newValue = [if el.oneLiner][inst.fragmentOf el][else]with_[inst.namer el]([for p in el.params][if not for.first], [/if][p.name][/for])[/if];
  [if not inst.encoding.impl.virtual]
  if (this.[a.name] == newValue) return this;
  [/if]
  [returnCopy]
}
[if not el.oneLiner]

private [inst.typer el.type] with_[inst.namer el]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]
[/if]
[/for]
[/template]

[template public builderCopyFrom Attribute a][a.instantiation.namer a.instantiation.encoding.builderCopy][/template]

[template public builderInit Attribute a]
[for inst = a.instantiation, el in inst.encoding.element if el.init]

[if el.builderCopy]
  [for ann in a.builderAttributeAnnotation]
[ann]
  [/for]
[/if]
[if el.private]private [else]public [/if][if el.final]final [/if][builderReturnType a] [inst.namer el]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]return [builderReturnThis a][/inst.codeOf]
[/for]
[/template]

[template public builderStaticFields Attribute... as]
[for a in as if a.encoding,
    el in a.instantiation.encoding.element if el.builderStaticField]
[declareAuxiliaryField a.instantiation el]
[/for]
[/template]

[template public builderFields Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element if el.builderField]
[declareAuxiliaryField a.instantiation el]
  [/for]
[/template]

[template public builderHelperMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.builderMethod]

[declareMethod a.instantiation el]
[else if el.build]
  [if not (a.instantiation.isInlined el)]

[declareMethod a.instantiation el]
  [/if]
[/if]
  [/for]
[/template]

[template public valueHelperMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.valueMethod]

[declareMethod a.instantiation el]
[else if not (el.static or el.inBuilder)]
  [if el.inlinable and (not el.oneLiner)]

[declareMethod a.instantiation el]
  [/if]
[else if el.from]

[declareMethod a.instantiation el]
[/if]
  [/for]
[/template]

[template public staticFields Attribute... as]
[for a in as if a.encoding,
    inst = a.instantiation,
    enc = inst.encoding,
    el in enc.element if el.staticField]
[declareAuxiliaryField inst el]
[/for]
[/template]

[template public staticMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.staticMethod]

[declareMethod a.instantiation el]
[else if el.static and (not el.from)]
  [if el.inlinable and (not el.oneLiner)]

[declareMethod a.instantiation el]
  [/if]
[/if]
  [/for]
[/template]

[template public accessor Attribute a]
[for inst = a.instantiation, el = inst.expose]
[a.access][inst.type] [a.names.get]() [inst.codeOf el]
[/for]
[/template]

[template public from Attribute a String expression][a.instantiation.fragmentOf a.instantiation.encoding.from expression][/template]

[template public string Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.string][/template]

[template public hash Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.hash][/template]

[template public equals Attribute a String expression][a.instantiation.fragmentOf a.instantiation.encoding.equals expression][/template]

[template public implType Attribute a][a.instantiation.typer a.instantiation.encoding.impl.type][/template]

[template public fromBuild Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.build][/a.instantiation.fragmentOf][/template]

[template declareAuxiliaryField Inst inst Elem el]
[if el.private]private [else]public [/if][if el.static]static [/if][if el.final]final [/if][inst.typer el.type] [inst.namer el][if el.code] = [inst.codeOf el][/if];
[/template]

[template declareMethod Inst inst Elem el]
[if el.private]private [else]public [/if][if el.static]static [/if][if el.final]final [/if][inst.ownTypeParams el][inst.typer el.type] [inst.namer el]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]
[/template]

[template throwsClause Inst inst Elem el][if el.thrown]throws [for t in el.thrown][if not for.first], [/if][inst.typer t][/for][/if][/template]

[template builderReturnThis Attribute a][if a.containingType.innerBuilder.isExtending]([a.containingType.typeBuilder]) [/if]this[/template]

[template builderReturnType Attribute a][if a.containingType.innerBuilder.isExtending][a.containingType.typeBuilder][else][a.containingType.typeBuilder.simple][a.containingType.generics.args][/if][/template]

[template jsonIgnore Attribute a][if a.containingType.generateJacksonIngoreFields]@com.fasterxml.jackson.annotation.JsonIgnore[/if][/template]
