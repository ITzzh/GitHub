/*
 * Copyright 2017 Riyaz Ahamed
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.novoda:bintray-release:0.5.0'
  }
}

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.3"

  defaultConfig {
    minSdkVersion 9
    targetSdkVersion 25
    versionCode 1
    versionName "1.2.2"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  compile project(':multi-view-adapter')
  provided('com.android.databinding:library:1.3.1') {
    transitive = false
  }
  provided('com.android.databinding:baseLibrary:2.3.2') {
    transitive = false
  }
}

publish {
  userOrg = 'devahamed'
  groupId = 'com.github.devahamed'
  artifactId = 'multi-view-adapter-databinding'
  publishVersion = '1.2.2'
  repoName = 'MultiViewAdapter'
  desc = 'Additional DataBinding support for MultiViewAdapter'
  website = 'https://github.com/DevAhamed/MultiViewAdapter'
}

if (project.hasProperty("android")) {
  // Android libraries
  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }

  task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError true
  }
  afterEvaluate {
    javadoc.classpath +=
        files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files
        })
  }
} else {
  // Java libraries
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives sourcesJar
}
